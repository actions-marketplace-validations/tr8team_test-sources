import { App } from "./lib/main";
import { IoInputRetriever } from "./lib/adapters/io-input-retriever";
import { GithubActionIO } from "./external/github-action-i-o";
import { ZodValidatorAdapter } from "./lib/adapters/zod-validator-adapter";
import { config } from "./lib/input";
import { LoadingService } from "./lib/service";
import { PathLoaders } from "./lib/path-loaders";
import { JsonFileSource } from "./external/json-file-source";
import { vitestResult } from "./lib/sources/vitest-result";
import { VitestResultMapper } from "./lib/mappers/vitest-result";
import { vitestIstanbulCoverage } from "./lib/sources/vitest-istanbul-coverage";
import { VitestIstanbulCoverageMapper } from "./lib/mappers/vitest-istanbul-coverage";
import os from "os";
import { GithubActionLogger } from "./external/github-action-logger";
import { setFailed } from "@actions/core";
import { stringToOption } from "./lib/util";
const log = new GithubActionLogger();
const validator = new ZodValidatorAdapter(config);
const io = new GithubActionIO();
const input = new IoInputRetriever(io, validator);
const jsonLoader = new JsonFileSource();
// vitest results
const vitestResultValidator = new ZodValidatorAdapter(vitestResult);
const vitestResultMapper = new VitestResultMapper();
// vitest istanbul coverage
const vitestIstanbulCoverageValidator = new ZodValidatorAdapter(vitestIstanbulCoverage);
const vitestIstanbulCoverageMapper = new VitestIstanbulCoverageMapper();
const loaders = [
    new PathLoaders(jsonLoader, "vitest-result", vitestResultValidator, vitestResultMapper),
    new PathLoaders(jsonLoader, "vitest-istanbul-coverage", vitestIstanbulCoverageValidator, vitestIstanbulCoverageMapper),
];
const service = new LoadingService(loaders);
const app = new App(input, io, service);
await app.run().match({
    none: () => {
        log.info("✅ Successfully extracted metadata");
    },
    some: async (errs) => {
        log.error("❌ Failed to extract metadata");
        for (const err of errs) {
            setFailed(err);
            const messages = await stringToOption(err?.stack).match({
                none: ["❌ No stacktrace found!"],
                some: (stacktrace) => stacktrace.split(os.EOL),
            });
            for (const m of messages) {
                log.error(m);
            }
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDakMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTVDLE1BQU0sR0FBRyxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUNyQyxNQUFNLFNBQVMsR0FBRyxJQUFJLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xELE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7QUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUV4QyxpQkFBaUI7QUFDakIsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO0FBRXBELDJCQUEyQjtBQUMzQixNQUFNLCtCQUErQixHQUFHLElBQUksbUJBQW1CLENBQzdELHNCQUFzQixDQUN2QixDQUFDO0FBQ0YsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLDRCQUE0QixFQUFFLENBQUM7QUFFeEUsTUFBTSxPQUFPLEdBQWE7SUFDeEIsSUFBSSxXQUFXLENBQ2IsVUFBVSxFQUNWLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsa0JBQWtCLENBQ25CO0lBQ0QsSUFBSSxXQUFXLENBQ2IsVUFBVSxFQUNWLDBCQUEwQixFQUMxQiwrQkFBK0IsRUFDL0IsNEJBQTRCLENBQzdCO0NBQ0YsQ0FBQztBQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFeEMsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ3BCLElBQUksRUFBRSxHQUFHLEVBQUU7UUFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUNELElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzFDLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ3RCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ3RELElBQUksRUFBRSxDQUFDLHdCQUF3QixDQUFDO2dCQUNoQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUMvQyxDQUFDLENBQUM7WUFDSCxLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFDeEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNkO1NBQ0Y7SUFDSCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vbGliL21haW5cIjtcbmltcG9ydCB7IElvSW5wdXRSZXRyaWV2ZXIgfSBmcm9tIFwiLi9saWIvYWRhcHRlcnMvaW8taW5wdXQtcmV0cmlldmVyXCI7XG5pbXBvcnQgeyBHaXRodWJBY3Rpb25JTyB9IGZyb20gXCIuL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24taS1vXCI7XG5pbXBvcnQgeyBab2RWYWxpZGF0b3JBZGFwdGVyIH0gZnJvbSBcIi4vbGliL2FkYXB0ZXJzL3pvZC12YWxpZGF0b3ItYWRhcHRlclwiO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIi4vbGliL2lucHV0XCI7XG5pbXBvcnQgeyBMb2FkaW5nU2VydmljZSB9IGZyb20gXCIuL2xpYi9zZXJ2aWNlXCI7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tIFwiLi9saWIvaW50ZXJmYWNlL2xvYWRlclwiO1xuaW1wb3J0IHsgUGF0aExvYWRlcnMgfSBmcm9tIFwiLi9saWIvcGF0aC1sb2FkZXJzXCI7XG5pbXBvcnQgeyBKc29uRmlsZVNvdXJjZSB9IGZyb20gXCIuL2V4dGVybmFsL2pzb24tZmlsZS1zb3VyY2VcIjtcbmltcG9ydCB7IHZpdGVzdFJlc3VsdCB9IGZyb20gXCIuL2xpYi9zb3VyY2VzL3ZpdGVzdC1yZXN1bHRcIjtcbmltcG9ydCB7IFZpdGVzdFJlc3VsdE1hcHBlciB9IGZyb20gXCIuL2xpYi9tYXBwZXJzL3ZpdGVzdC1yZXN1bHRcIjtcbmltcG9ydCB7IHZpdGVzdElzdGFuYnVsQ292ZXJhZ2UgfSBmcm9tIFwiLi9saWIvc291cmNlcy92aXRlc3QtaXN0YW5idWwtY292ZXJhZ2VcIjtcbmltcG9ydCB7IFZpdGVzdElzdGFuYnVsQ292ZXJhZ2VNYXBwZXIgfSBmcm9tIFwiLi9saWIvbWFwcGVycy92aXRlc3QtaXN0YW5idWwtY292ZXJhZ2VcIjtcbmltcG9ydCBvcyBmcm9tIFwib3NcIjtcbmltcG9ydCB7IEdpdGh1YkFjdGlvbkxvZ2dlciB9IGZyb20gXCIuL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24tbG9nZ2VyXCI7XG5pbXBvcnQgeyBzZXRGYWlsZWQgfSBmcm9tIFwiQGFjdGlvbnMvY29yZVwiO1xuaW1wb3J0IHsgc3RyaW5nVG9PcHRpb24gfSBmcm9tIFwiLi9saWIvdXRpbFwiO1xuXG5jb25zdCBsb2cgPSBuZXcgR2l0aHViQWN0aW9uTG9nZ2VyKCk7XG5jb25zdCB2YWxpZGF0b3IgPSBuZXcgWm9kVmFsaWRhdG9yQWRhcHRlcihjb25maWcpO1xuY29uc3QgaW8gPSBuZXcgR2l0aHViQWN0aW9uSU8oKTtcbmNvbnN0IGlucHV0ID0gbmV3IElvSW5wdXRSZXRyaWV2ZXIoaW8sIHZhbGlkYXRvcik7XG5jb25zdCBqc29uTG9hZGVyID0gbmV3IEpzb25GaWxlU291cmNlKCk7XG5cbi8vIHZpdGVzdCByZXN1bHRzXG5jb25zdCB2aXRlc3RSZXN1bHRWYWxpZGF0b3IgPSBuZXcgWm9kVmFsaWRhdG9yQWRhcHRlcih2aXRlc3RSZXN1bHQpO1xuY29uc3Qgdml0ZXN0UmVzdWx0TWFwcGVyID0gbmV3IFZpdGVzdFJlc3VsdE1hcHBlcigpO1xuXG4vLyB2aXRlc3QgaXN0YW5idWwgY292ZXJhZ2VcbmNvbnN0IHZpdGVzdElzdGFuYnVsQ292ZXJhZ2VWYWxpZGF0b3IgPSBuZXcgWm9kVmFsaWRhdG9yQWRhcHRlcihcbiAgdml0ZXN0SXN0YW5idWxDb3ZlcmFnZVxuKTtcbmNvbnN0IHZpdGVzdElzdGFuYnVsQ292ZXJhZ2VNYXBwZXIgPSBuZXcgVml0ZXN0SXN0YW5idWxDb3ZlcmFnZU1hcHBlcigpO1xuXG5jb25zdCBsb2FkZXJzOiBMb2FkZXJbXSA9IFtcbiAgbmV3IFBhdGhMb2FkZXJzKFxuICAgIGpzb25Mb2FkZXIsXG4gICAgXCJ2aXRlc3QtcmVzdWx0XCIsXG4gICAgdml0ZXN0UmVzdWx0VmFsaWRhdG9yLFxuICAgIHZpdGVzdFJlc3VsdE1hcHBlclxuICApLFxuICBuZXcgUGF0aExvYWRlcnMoXG4gICAganNvbkxvYWRlcixcbiAgICBcInZpdGVzdC1pc3RhbmJ1bC1jb3ZlcmFnZVwiLFxuICAgIHZpdGVzdElzdGFuYnVsQ292ZXJhZ2VWYWxpZGF0b3IsXG4gICAgdml0ZXN0SXN0YW5idWxDb3ZlcmFnZU1hcHBlclxuICApLFxuXTtcbmNvbnN0IHNlcnZpY2UgPSBuZXcgTG9hZGluZ1NlcnZpY2UobG9hZGVycyk7XG5jb25zdCBhcHAgPSBuZXcgQXBwKGlucHV0LCBpbywgc2VydmljZSk7XG5cbmF3YWl0IGFwcC5ydW4oKS5tYXRjaCh7XG4gIG5vbmU6ICgpID0+IHtcbiAgICBsb2cuaW5mbyhcIuKchSBTdWNjZXNzZnVsbHkgZXh0cmFjdGVkIG1ldGFkYXRhXCIpO1xuICB9LFxuICBzb21lOiBhc3luYyAoZXJycykgPT4ge1xuICAgIGxvZy5lcnJvcihcIuKdjCBGYWlsZWQgdG8gZXh0cmFjdCBtZXRhZGF0YVwiKTtcbiAgICBmb3IgKGNvbnN0IGVyciBvZiBlcnJzKSB7XG4gICAgICBzZXRGYWlsZWQoZXJyKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgc3RyaW5nVG9PcHRpb24oZXJyPy5zdGFjaykubWF0Y2goe1xuICAgICAgICBub25lOiBbXCLinYwgTm8gc3RhY2t0cmFjZSBmb3VuZCFcIl0sXG4gICAgICAgIHNvbWU6IChzdGFja3RyYWNlKSA9PiBzdGFja3RyYWNlLnNwbGl0KG9zLkVPTCksXG4gICAgICB9KTtcbiAgICAgIGZvciAoY29uc3QgbSBvZiBtZXNzYWdlcykge1xuICAgICAgICBsb2cuZXJyb3IobSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG4iXX0=