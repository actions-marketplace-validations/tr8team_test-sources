import { Err, Ok, Res } from "./core/result";
class LoadingService {
    #loaders;
    constructor(loaders) {
        this.#loaders = loaders;
    }
    load(config) {
        const results = Res.all(...this.#loaders.map((l) => l.load(config)));
        return results
            .map((o) => o.map((oo) => oo.native()))
            .andThen(async (output) => {
            const all = await Promise.all(output);
            const left = all.filter((x) => x != null);
            if (left.length > 1) {
                return Err([
                    new Error(`More than 1 loaders matched: ${config.type}`),
                ]);
            }
            else if (left.length < 1) {
                return Err([new Error(`No loaders matched: ${config.type}`)]);
            }
            else {
                return Ok(left[0]);
            }
        });
    }
}
export { LoadingService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFRckQsTUFBTSxjQUFjO0lBQ2xCLFFBQVEsQ0FBVztJQUVuQixZQUFZLE9BQWlCO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLENBQUMsTUFBYztRQUNqQixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sT0FBTzthQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7YUFDdEMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEMsTUFBTSxJQUFJLEdBQWEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBYSxDQUFDO1lBQ2hFLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLE9BQU8sR0FBRyxDQUFDO29CQUNULElBQUksS0FBSyxDQUFDLGdDQUFnQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ3pELENBQUMsQ0FBQzthQUNKO2lCQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMvRDtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNwQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vaW5wdXRcIjtcbmltcG9ydCB7IEVyciwgT2ssIFJlcywgUmVzdWx0IH0gZnJvbSBcIi4vY29yZS9yZXN1bHRcIjtcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gXCIuL291dHB1dFwiO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlL2xvYWRlclwiO1xuXG5pbnRlcmZhY2UgSUxvYWRpbmdTZXJ2aWNlIHtcbiAgbG9hZChpOiBDb25maWcpOiBSZXN1bHQ8T3V0cHV0LCBFcnJvcltdPjtcbn1cblxuY2xhc3MgTG9hZGluZ1NlcnZpY2UgaW1wbGVtZW50cyBJTG9hZGluZ1NlcnZpY2Uge1xuICAjbG9hZGVyczogTG9hZGVyW107XG5cbiAgY29uc3RydWN0b3IobG9hZGVyczogTG9hZGVyW10pIHtcbiAgICB0aGlzLiNsb2FkZXJzID0gbG9hZGVycztcbiAgfVxuXG4gIGxvYWQoY29uZmlnOiBDb25maWcpOiBSZXN1bHQ8T3V0cHV0LCBFcnJvcltdPiB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFJlcy5hbGwoLi4udGhpcy4jbG9hZGVycy5tYXAoKGwpID0+IGwubG9hZChjb25maWcpKSk7XG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgICAgIC5tYXAoKG8pID0+IG8ubWFwKChvbykgPT4gb28ubmF0aXZlKCkpKVxuICAgICAgLmFuZFRoZW4oYXN5bmMgKG91dHB1dCkgPT4ge1xuICAgICAgICBjb25zdCBhbGwgPSBhd2FpdCBQcm9taXNlLmFsbChvdXRwdXQpO1xuICAgICAgICBjb25zdCBsZWZ0OiBPdXRwdXRbXSA9IGFsbC5maWx0ZXIoKHgpID0+IHggIT0gbnVsbCkgYXMgT3V0cHV0W107XG4gICAgICAgIGlmIChsZWZ0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gRXJyKFtcbiAgICAgICAgICAgIG5ldyBFcnJvcihgTW9yZSB0aGFuIDEgbG9hZGVycyBtYXRjaGVkOiAke2NvbmZpZy50eXBlfWApLFxuICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxlZnQubGVuZ3RoIDwgMSkge1xuICAgICAgICAgIHJldHVybiBFcnIoW25ldyBFcnJvcihgTm8gbG9hZGVycyBtYXRjaGVkOiAke2NvbmZpZy50eXBlfWApXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIE9rKGxlZnRbMF0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBMb2FkaW5nU2VydmljZSB9O1xuZXhwb3J0IHR5cGUgeyBJTG9hZGluZ1NlcnZpY2UgfTtcbiJdfQ==